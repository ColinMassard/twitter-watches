"use strict";
self["webpackHotUpdateboilerplate_prismic"]("main",{

/***/ "./app/components/Canvas/Home/Media.js":
/*!*********************************************!*\
  !*** ./app/components/Canvas/Home/Media.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var gsap__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! gsap */ "./node_modules/gsap/index.js");
/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ogl */ "./node_modules/ogl/src/core/Program.js");
/* harmony import */ var ogl__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ogl */ "./node_modules/ogl/src/core/Mesh.js");
/* harmony import */ var shaders_home_fragment_glsl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! shaders/home-fragment.glsl */ "./app/shaders/home-fragment.glsl");
/* harmony import */ var shaders_home_vertex_glsl__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! shaders/home-vertex.glsl */ "./app/shaders/home-vertex.glsl");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (class {
  constructor({
    element,
    geometry,
    gl,
    index,
    scene,
    sizes
  }) {
    this.element = element;
    this.geometry = geometry;
    this.gl = gl;
    this.index = index;
    this.scene = scene;
    this.sizes = sizes;
    this.extra = {
      x: 0,
      y: 0
    };
    this.createTexture();
    this.createProgram();
    this.createMesh();
    this.createBounds({
      sizes: this.sizes
    });
  }
  createTexture() {
    const image = this.element;
    this.texture = window.TEXTURES[image.getAttribute('data-src')];
  }
  createProgram() {
    this.program = new ogl__WEBPACK_IMPORTED_MODULE_2__.Program(this.gl, {
      fragment: shaders_home_fragment_glsl__WEBPACK_IMPORTED_MODULE_0__["default"],
      vertex: shaders_home_vertex_glsl__WEBPACK_IMPORTED_MODULE_1__["default"],
      uniforms: {
        uAlpha: {
          value: 0
        },
        uSpeed: {
          value: 0
        },
        uViewportSizes: {
          value: [this.sizes.width, this.sizes.height]
        },
        tMap: {
          value: this.texture
        }
      }
    });
  }
  createMesh() {
    this.mesh = new ogl__WEBPACK_IMPORTED_MODULE_3__.Mesh(this.gl, {
      geometry: this.geometry,
      program: this.program
    });
    this.mesh.setParent(this.scene);

    // this.mesh.rotation.z = -Math.PI / 4
  }

  createBounds({
    sizes
  }) {
    this.sizes = sizes;
    this.bounds = this.element.getBoundingClientRect();
    this.updateScale(sizes);
    this.updateX();
    this.updateY();
  }

  /****
   * ANIMATIONS
   * ***/
  show() {
    gsap__WEBPACK_IMPORTED_MODULE_4__["default"].fromTo(this.program.uniforms.uAlpha, {
      value: 0
    }, {
      value: 1
    });
  }
  hide() {
    gsap__WEBPACK_IMPORTED_MODULE_4__["default"].to(this.program.uniforms.uAlpha, {
      value: 0
    });
  }

  /****
   * EVENTS
   * ***/
  onResize(sizes, scroll) {
    this.extra = {
      x: 0,
      y: 0
    };
    this.createBounds(sizes);
    this.updateX(scroll && scroll.x);
    this.updateY(scroll && scroll.y);
  }

  /****
   * LOOP
   * ***/
  updateScale() {
    this.width = this.bounds.width / window.innerWidth;
    this.height = this.bounds.height / window.innerHeight;
    this.mesh.scale.x = this.sizes.width * this.width;
    this.mesh.scale.y = this.sizes.height * this.height;
  }
  updateX(x = 0) {
    this.x = (this.bounds.left + x) / window.innerWidth;
    this.mesh.position.x = -this.sizes.width / 2 + this.mesh.scale.x / 2 + this.x * this.sizes.width + this.extra.x;
  }
  updateY(media, y = 0, multiplier, direction, height, offsetY, scaleY) {
    // console.log(multiplier)
    this.y = (this.bounds.top + y) / window.innerHeight;
    this.mesh.position.y = (this.sizes.height / 2 - this.mesh.scale.y / 2 - this.y * this.sizes.height + this.extra.y) * multiplier;

    // console.log(direction, scaleY, offsetY, height, this.mesh)

    if (multiplier === 1) {
      if (direction === 'top') {
        const y = media.mesh.position.y + scaleY;
        if (y < -offsetY) {
          media.extra.y += height;
        }
      } else if (direction === 'bottom') {
        const y = media.mesh.position.y - scaleY;
        if (y > offsetY) {
          media.extra.y -= height;
        }
      }
    } else if (multiplier === -1) {
      console.log('inverted');
      if (direction === 'top') {
        const y = media.mesh.position.y - scaleY;
        if (y > offsetY) {
          media.extra.y -= height;
        }
      } else if (direction === 'bottom') {
        const y = media.mesh.position.y + scaleY;
        if (y < -offsetY) {
          media.extra.y += height;
        }
      }
    }
  }
  update(media, scroll, speed, multiplier, direction, height, offsetY, scaleY) {
    this.updateX(scroll.x);
    this.updateY(media, scroll.y, multiplier, direction, height, offsetY, scaleY);
    this.program.uniforms.uSpeed.value = speed;
  }
});

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("35d74af4be9d8ad0bab0")
/******/ })();
/******/ 
/******/ }
);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,